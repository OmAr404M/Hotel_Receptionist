package javaapplication10;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Date;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hp
 */
public class costumer extends javax.swing.JFrame {

    /**
     * Creates new form costumer
     */
    public costumer() throws ClassNotFoundException,SQLException {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        DefaultTableModel model = (DefaultTableModel) costumerTable.getModel();
        String sql2 = "select * from costumert ";
        Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel", "root", "");
        Statement st = c.createStatement();
        ResultSet rs = st.executeQuery(sql2);
        while (rs.next()) {
             
                 model.addRow(new Object[]{rs.getInt("id"), rs.getString("fname"), rs.getString("lname"),
                     rs.getString("email"), rs.getString("Nationality"), rs.getString("address"),
                     rs.getString("DateOfB"), rs.getString("Gender"), rs.getString("CheckI"),
                     rs.getString("CheckO"), rs.getString("meal"), rs.getString("RoomT"),
                     rs.getString("RoomN"),rs.getString("near_checkout")});

        }

    }                         

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nCheckOut = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        costumerTable = new javax.swing.JTable();
        fristname = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        lastname = new javax.swing.JLabel();
        Address = new javax.swing.JLabel();
        Email = new javax.swing.JLabel();
        nationality = new javax.swing.JLabel();
        birth = new javax.swing.JLabel();
        gender = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        fname = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        checkOut = new javax.swing.JLabel();
        roomType = new javax.swing.JLabel();
        checkIn = new javax.swing.JLabel();
        RoomNo = new javax.swing.JLabel();
        Id = new javax.swing.JLabel();
        RoomT = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        back = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        TotalCost = new javax.swing.JButton();
        jstatitcal = new javax.swing.JButton();
        Gender = new javax.swing.JComboBox<>();
        RoomN = new javax.swing.JComboBox<>();
        Meal = new javax.swing.JLabel();
        meal = new javax.swing.JComboBox<>();
        DateOfB = new com.toedter.calendar.JDateChooser();
        CheckI = new com.toedter.calendar.JDateChooser();
        CheckO = new com.toedter.calendar.JDateChooser();
        Nationality = new com.toedter.components.JLocaleChooser();

        nCheckOut.setEditable(false);
        nCheckOut.setText("jTextField4");
        nCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCheckOutActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        costumerTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        costumerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Fname", "Lname", "Email", "Nationality1", "Address", "DateOfBirth", "Gender1", "CheckInDate", "CheckOUTDate", "Meal", "RoomType", "RoomNo", "near_checkout"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(costumerTable);

        fristname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fristname.setText("First name:");

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        lastname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lastname.setText("Last name:");

        Address.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Address.setText("Address:");

        Email.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Email.setText("Email:");

        nationality.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nationality.setText("Nationality:");

        birth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birth.setText("Date Of Birth:");

        gender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gender.setText("Gender:");

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        checkOut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkOut.setText("Check Out:");

        roomType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        roomType.setText("Room Type:");

        checkIn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkIn.setText("Check In:");

        RoomNo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RoomNo.setText("Room No.:");

        Id.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Id.setText(" Id:");

        RoomT.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        RoomT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select your room type", "Single", "Double", "Sweat" }));
        RoomT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomTActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        add.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(0, 0, 0));
        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        TotalCost.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TotalCost.setText("Total Cost");
        TotalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalCostActionPerformed(evt);
            }
        });

        jstatitcal.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jstatitcal.setText("Statiscal");
        jstatitcal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jstatitcalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(TotalCost)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jstatitcal, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jstatitcal, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Gender.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        Gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select your gender", "Male", "Female" }));
        Gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenderActionPerformed(evt);
            }
        });

        RoomN.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        RoomN.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select room number", "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020" }));

        Meal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Meal.setText("Meal");

        meal.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        meal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Your Meal", "1", "2", "3" }));
        meal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mealActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nationality, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(checkIn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(birth, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Meal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RoomNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckO, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CheckI, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(meal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RoomT, 0, 156, Short.MAX_VALUE)
                                    .addComponent(address)
                                    .addComponent(RoomN, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(DateOfB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Nationality, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fristname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(729, 729, 729)
                        .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(2015, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(fristname, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nationality, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Nationality, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(birth, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DateOfB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckI, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CheckO, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(meal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Meal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RoomT, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomType, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RoomN, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed

    }//GEN-LAST:event_idActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

if(fname.getText().length()==0 || lname.getText().length()==0 || email.getText().length()==0 || address.getText().toString().length()==0 || DateOfB.getDate().toString().length()==0 ||
        Gender.getSelectedIndex()==0 || CheckI.getDate().toString().length()==0 || CheckO.getDate().toString().length()==0 || meal.getSelectedIndex()==0 || RoomT.getSelectedIndex()==0 ||
        RoomN.getSelectedIndex()==0 || nCheckOut.getText().length()==0 )
{
   JOptionPane.showMessageDialog(null,"Fill all required data");
}
else
{
    DefaultTableModel model = (DefaultTableModel) costumerTable.getModel();
        try {
            model.addRow(new Object[]{
                id.getText(),
                fname.getText(),
                lname.getText(),
                email.getText(),
                Gender.getSelectedItem(),
                address.getText(),
                DateOfB.getDate(),
                Gender.getSelectedItem(),
                CheckI.getDate(),
                CheckO.getDate(),
                meal.getSelectedItem(),
                RoomT.getSelectedItem(),
                RoomN.getSelectedItem(),
                nCheckOut.getText()});

            String Fname = fname.getText();
            String Lname = lname.getText();
            String Email = email.getText();
            String Nationality1 = (String) Nationality.getSelectedItem();
            String Address = address.getText();
            Date Date_OfBirth = DateOfB.getDate();
            String DateOfBirth = Date_OfBirth + "";
            String Gender1 = (String) Gender.getSelectedItem();
            Date jDate_CheckIn = CheckI.getDate();
            String CheckInDate = jDate_CheckIn + "";
            Date jDate_CheckOUT = CheckO.getDate();
            String CheckOUTDate = jDate_CheckIn + "";
            String Meal = (String) meal.getSelectedItem();
            String RoomType = (String) RoomT.getSelectedItem();
            String RoomNo = (String) RoomN.getSelectedItem();
            int RoomNo1 = RoomN.getSelectedIndex();
            long nearCheckout = jDate_CheckOUT.getTime() - jDate_CheckIn.getTime();
            int diffDays = (int) (nearCheckout / 1000 / 60 / 60 / 24);
            String nearC = diffDays + "left";

            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel", "root", "");
            Statement st = c.createStatement();

            String sq3 = "SELECT * from costumert where Id";
            ResultSet rs1 = st.executeQuery(sq3);

            while (rs1.next()) {
                String dbroomN = (rs1.getString("RoomN"));
                if (RoomN.getSelectedItem().equals(dbroomN)) {
                    JOptionPane.showMessageDialog(null, "chike room nomber", "Error", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(1);
                }
            }

            String sql = "insert into costumert(fname,lname,email,Nationality,address,DateOfB,Gender,CheckI,CheckO,Meal,RoomT,RoomN,near_checkout) "
                    + "values('" + Fname + "','" + Lname + "','" + Email + "','" + Nationality1 + "','" + Address + "','" + DateOfBirth + "','" + Gender1 + "','" + jDate_CheckIn + "', '" + CheckOUTDate + "','" + Meal + "','" + RoomType + "','" + RoomNo + "','" + nearC + "')";
            int result = st.executeUpdate(sql);

            if (result == 1) {
                JOptionPane.showMessageDialog(null, "Add has been saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add room", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            String sql2 = "select * from costumert ";
            ResultSet rs = st.executeQuery(sql2);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getInt("id"), rs.getString("Fname"), rs.getString("Lname"), rs.getString("Email"), rs.getString("Nationality1"), rs.getString("Address"), rs.getString("DateOfBirth"), rs.getString("Gender1"), rs.getString("CheckInDate"), rs.getString("CheckOUTDate"), rs.getString("Meal"), rs.getString("RoomType"), rs.getString("RoomNo")});

            }

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "My SQL Connector noy faund", "Erreor", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        ////////////////////////////
        try {
             Date jDate_CheckIn = CheckI.getDate();
            Date jDate_CheckOUT = CheckO.getDate();
            long nearCheckout = jDate_CheckOUT.getTime() - jDate_CheckIn.getTime();
            int diffDays = (int) (nearCheckout / 1000 / 60 / 60 / 24);
            int Single = 50;
            int Double = 80;
            int Sweat = 100;
            int oneMeal = 10;
            int towMeals = 20;
            int ThreeMeals = 30;
            int cs = 0; 
            int cd = 0; 
            int csw = 0; 
            int cm1=0;
            int cm2=0;
            int cm3=0;
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel", "root", "");
            Statement st = c.createStatement();

            String sq3 = "SELECT * from costumert where Id";
            ResultSet rs1 = st.executeQuery(sq3);
            int Id1 = 0;
            String ns = "Single" ;
            String nd = "Double" ;
            String nsw = "Sweat";
            String v1 = "1";
            String v2 = "2";
            String v3 = "3";
            while (rs1.next()) {
                Id1 = (rs1.getInt("Id"));
                
                if (ns.equals(rs1.getString("RoomT"))) {
                    cs++;
                } else if (nd.equals(rs1.getString("RoomT")))
                    cd++;
                else if (nsw.equals(rs1.getString("RoomT")))
                    csw++;
                if (v1.equals(rs1.getString("meal"))) {
                    cm1++;
                }else if (v2.equals(rs1.getString("meal")))
                    cm2++;
                else if (v3.equals(rs1.getString("meal")))
                    cm3++;
            }

            if (RoomT.getSelectedItem().equals("Single") && meal.getSelectedItem().equals("1")) {
                double tax = (((diffDays * Single) + (diffDays * oneMeal)) * 0.25) / 100;
                double total = ((diffDays * Single) + (diffDays * oneMeal));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
//                int m = cm1 +1;
//                int cr= cs +1;
                String StaticS = cs+"Single room";
                String StaticM = cm1 +"mealls_1meall";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }

            }

            if (RoomT.getSelectedItem().equals("Double") && meal.getSelectedItem().equals("1")) {
                double tax = (((diffDays * Double) + (diffDays * oneMeal)) * 0.25) / 100;
                double total = ((diffDays * Double) + (diffDays * oneMeal));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                
                String StaticS = cd+"Double room";
                String StaticM = cm1 +"mealls_1meall";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
            if (RoomT.getSelectedItem().equals("Sweat") && meal.getSelectedItem().equals("1")) {
                double tax = (((diffDays * Sweat) + (diffDays * oneMeal)) * 0.25) / 100;
                double total = ((diffDays * Sweat) + (diffDays * oneMeal));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = csw+"Sweat room";
                String StaticM = cm1 +"mealls_1meall";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            if (RoomT.getSelectedItem().equals("Single") && meal.getSelectedItem().equals("2")) {
                double tax = (((diffDays * Single) + (diffDays * towMeals)) * 0.25) / 100;
                double total = ((diffDays * Single) + (diffDays * towMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = cs+"Single room";
                String StaticM = cm2 +"mealls_2mealls";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
             if (RoomT.getSelectedItem().equals("Double") && meal.getSelectedItem().equals("2")) {
                double tax = (((diffDays * Double) + (diffDays * towMeals)) * 0.25) / 100;
                double total = ((diffDays * Double) + (diffDays * towMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = cd+"Double room";
                String StaticM = cm2 +"mealls_2mealls";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            if (RoomT.getSelectedItem().equals("Sweat") && meal.getSelectedItem().equals("2")) {
                double tax = (((diffDays * Sweat) + (diffDays * towMeals)) * 0.25) / 100;
                double total = ((diffDays * Sweat) + (diffDays * towMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = csw+"Sweat room";
                String StaticM = cm2 +"mealls_2mealls";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
            if (RoomT.getSelectedItem().equals("Single") && meal.getSelectedItem().equals("3")) {
                double tax = (((diffDays * Single) + (diffDays * ThreeMeals)) * 0.25) / 100;
                double total = ((diffDays * Single) + (diffDays * ThreeMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = cs+"Single room";
                String StaticM = cm3 +"mealls_3meall";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            if (RoomT.getSelectedItem().equals("Double") && meal.getSelectedItem().equals("3")) {
                double tax = (((diffDays * Double) + (diffDays * ThreeMeals)) * 0.25) / 100;
                double total = ((diffDays * Double) + (diffDays * ThreeMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = cd+"Double room";
                String StaticM = cm3 +"mealls_3mealls";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
            if (RoomT.getSelectedItem().equals("Sweat") && meal.getSelectedItem().equals("3")) {
                double tax = (((diffDays * Sweat) + (diffDays * ThreeMeals)) * 0.25) / 100;
                double total = ((diffDays * Sweat) + (diffDays * ThreeMeals));
                double subTotal = (total + tax);
                String Tax = tax + "$";
                String SubTotal = total + "$";
                String Total = subTotal + "$";
                String sq2 = "insert into detailed_bill(cost_Id,b_tax,b_subtotal,b_total) values('" + Id1 + "','" + Tax + "','" + SubTotal + "','" + Total + "')";
                int result2 = st.executeUpdate(sq2);
                if (result2 == 1) {
                    JOptionPane.showMessageDialog(null, "Add detailed_bill done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add detailed_bill", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                
                String StaticS = csw+"Sweat room";
                String StaticM = cm3 +"mealls_3meall";
                String sq5 = "insert into statical(Statical_mealls,Statical_Room) values('"+ StaticM +"','" + StaticS + "')";
                int result5 = st.executeUpdate(sq5);
                if (result5 == 1) {
                    JOptionPane.showMessageDialog(null, "Add Statical done successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add Statical", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "My SQL Connector noy faund", "Erreor", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        //////////////////////////

        this.dispose();
        costumer Cost;
        try {
            Cost = new costumer();
            Cost.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }

}
         

    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try {

            try {
      
                int id1 = Integer.parseInt(id.getText());
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/hotel", "root", "");
                Statement st = c.createStatement();
                String sql = "delete from costumert where Id='" + id1 +"' ";
                int result = st.executeUpdate(sql);
                if (result == 1) {
                    JOptionPane.showMessageDialog(null, "Room has been deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Room has'nt been deleted", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
            }
            costumer rooms = new costumer();
            rooms.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_deleteActionPerformed
    private JFrame frame;
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
//        new mainMenu().setVisible(true);
        front f = new front();
        f.setLocation(500, 250);
        f.setSize(700, 300);
        f.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_backActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void RoomTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RoomTActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
  
        try {
            int number=Integer.parseInt(id.getText());
            Updatae edit;
            edit = new Updatae(number);
            edit.setVisible(true);
            edit.setLocation(550, 100);
            
//        int row = costumerTable.getSelectedRow();
//            int value = (int) costumerTable.getValueAt(row, 0);
//        Updatae edit = new Updatae();
//        edit.setVisible(true);
//        edit.setLocation(550, 100);
//        DefaultTableModel model = (DefaultTableModel) costumerTable.getModel();
//        if (costumerTable.getSelectedRow() == -1) {
//            if (costumerTable.getRowCount() == 0) {
//                JOptionPane.showMessageDialog(null, "Hotel Booking Update confirmed", "Hotel Management System",
//                        JOptionPane.OK_OPTION);
//            }
//        }

//        new Updatae().setVisible(true);
//        this.setVisible(false);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_updateActionPerformed

    private void TotalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalCostActionPerformed
        try {
            //         TODO add your handling code here:
//        int number = Integer.parseInt(id.getText());
Detailed_bill edit2 = null;
edit2 = new Detailed_bill();
edit2.setVisible(true);
edit2.setLocation(550, 100);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }//GEN-LAST:event_TotalCostActionPerformed

    private void mealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mealActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mealActionPerformed

    private void GenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenderActionPerformed

    private void nCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCheckOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nCheckOutActionPerformed

    private void jstatitcalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstatitcalActionPerformed
        // TODO add your handling code here:
        
        Staticall edit2 = null;
        try {
            edit2 = new Staticall();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        edit2.setVisible(true);
        edit2.setLocation(550, 100);
    }//GEN-LAST:event_jstatitcalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(costumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(costumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(costumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(costumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new costumer().setVisible(true);
                   try {
                    new costumer().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(costumer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Address;
    private com.toedter.calendar.JDateChooser CheckI;
    private com.toedter.calendar.JDateChooser CheckO;
    private com.toedter.calendar.JDateChooser DateOfB;
    private javax.swing.JLabel Email;
    private javax.swing.JComboBox<String> Gender;
    private javax.swing.JLabel Id;
    private javax.swing.JLabel Meal;
    private com.toedter.components.JLocaleChooser Nationality;
    private javax.swing.JComboBox<String> RoomN;
    private javax.swing.JLabel RoomNo;
    private javax.swing.JComboBox<String> RoomT;
    private javax.swing.JButton TotalCost;
    private javax.swing.JButton add;
    private javax.swing.JTextField address;
    private javax.swing.JButton back;
    private javax.swing.JLabel birth;
    private javax.swing.JLabel checkIn;
    private javax.swing.JLabel checkOut;
    private javax.swing.JTable costumerTable;
    private javax.swing.JButton delete;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fname;
    private javax.swing.JLabel fristname;
    private javax.swing.JLabel gender;
    private javax.swing.JTextField id;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jstatitcal;
    private javax.swing.JLabel lastname;
    private javax.swing.JTextField lname;
    private javax.swing.JComboBox<String> meal;
    private javax.swing.JTextField nCheckOut;
    private javax.swing.JLabel nationality;
    private javax.swing.JLabel roomType;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
